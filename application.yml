eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVICE_FULL_URL:http://localhost:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
  instance:
    hostname: eureka-0
    prefer-ip-address: true


security:
  oauth2:
    client:
      registration:
        customer-service:
          client-id: customer-service-client
          client-secret: IGmspBySEaEUrhTsKiWMrha2kSBtlUv7IpXezHd6qdY
        business-service:
          client-id: business-service-client
          client-secret: 664c5rD1wBS7XzbJ7aYxEGx49w9uvXotG2fc0RSsoRc
        payment-service:
          client-id: payment-service-client
          client-secret: e7aA5VgiG-i1pSKYpvz367SngLMH-oep7joRv8ZaE-A
spring:
  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/what_to_do}
    username: ${DATABASE_USERNAME:root}
    password: ${DATABASE_PASSWORD:wtdnow@456}
  devtools:
    livereload:
      enabled: false
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  output:
    ansi:
      enabled: always
  output:
    ansi:
      enabled: always
  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  # Kafka Producer Configuration
  kafka:
    bootstrap-servers: ${KAFKA_SERVICE:kafka-service:9092}
    producer:
      bootstrap-servers: ${KAFKA_SERVICE:kafka-service:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.StringOrBytesSerializer

    # Kafka Consumer Configuration
    consumer:
      bootstrap-servers: ${KAFKA_SERVICE:kafka-service:9092}
      group-id: user-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer  
  servlet:
    multipart:
      enabled: true
      max-file-size: 1000MB
      max-request-size: 1000MB

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true

# OAuth2 resource config
oauth2:
  google:
    api:
      verifier: ${GOOGLE_VERIFIER:https://www.googleapis.com/oauth2/v3/certs}
      issuer: ${GOOGLE_ISSUER:https://accounts.google.com}
  apple:
    api:
      verifier: ${APPLE_VERIFIER:https://appleid.apple.com/auth/keys}
      issuer: ${APPLE_ISSUER:https://appleid.apple.com}
  wtdnow:
    api:
      verifier: ${WTD_NOW_VERIFIER:http://security-server-svc/oauth2/jwks}
      issuer: ${WTD_NOW_ISSUER:https://uat.wtdnow.com}
REDIS_HOST: redis
REDIS_PORT: 6379      
logging:
  level:
    org:
      springframework:
        security: TRACE
        cloud.gateway: DEBUG      
CLOUD_GATEWAY_PORT: 8989
LOGO_PATH: /Users/eliasqayumi/what-to-do.png
github:
  token: ${GITHUB_TOKEN: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}
  repo: ${GITHUB_REPO:eliasqayumi/cloud-config-server}
  path: ${GITHUB_PATH:application.yml}        

